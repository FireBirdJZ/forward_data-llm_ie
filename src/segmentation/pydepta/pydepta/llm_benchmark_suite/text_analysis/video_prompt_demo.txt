Input to analyze:
['Henry Corrigan-Gibbs', 'Douglas Ross (1954) Career Development Professor of Software Technology, Assistant Professor, [CS]', 'henrycg@csail.mit.edu', '617-253-0301', 'Office: 32-G970a', 'Security and Cryptography', 'Systems and Networking', '']
['Constantinos Daskalakis', 'Armen Avanessians (1982) Professor, [AI+D and CS]', 'costis@csail.mit.edu', '(617) 253-9643', 'Office: 32-G694', 'AI and Society', 'AI for Healthcare and Life Sciences', 'Optimization and Game Theory']
['Christina Delimitrou', 'Associate Professor, [CS]', 'delimitrou@csail.mit.edu', 'Office: 32-G738', '', 'Computer Architecture', 'Computer Science and Artificial Intelligence Laboratory (CSAIL)', 'Cybersecurity']

What do the records of information seem to consist of?
#@@@@#
Text to Process:
['Steven Leeb', 'Emanuel E. Landsman (1958) Professor, [EE and CS]', 'sbleeb@mit.edu', '(617) 253-9360', 'Office: 10-069', 'Electronic, Magnetic, Optical and Quantum Materials and Devices', 'Energy', '']
['Charles Leiserson', 'Edwin Sibley Webster Professor; [CS]', 'cel@mit.edu', '(617) 253-5833', 'Office: 32-G768', 'Artificial Intelligence + Decision making', 'Computer Architecture', 'Systems and Networking']
['Barbara Liskov', 'Insitute Professor (post tenure)', 'liskov@csail.mit.edu', '(617) 253-5886', 'Office: 32-G942', 'Programming Languages and Software Engineering', 'Systems and Networking', '']
Understanding the Task:
The task is to create JSON objects for each professor using the provided text data. Each JSON object should include keys for 'name', 'position', and 'research_interests'.

Analyzing the Text:
The provided text data contains details about professors in list format. The first element is the professor's name, the second element (if present) is their position, and the third element (if present) is their research interests.

Handling Missing Information:
If any of these elements are missing (position or research interests), the value should be set to 'null'.

Watch Out For:
pronouns such as he, they, or her. Don't add these anywhere to the JSON object.

Step-by-Step Process with Examples:

Step 1: Extracting Names

Extract the first element from each list for the name.
Example:
Given ['Devin H. Bailey', None, 'Associate Professor'], the 'name' key will be "Devin H. Bailey".
Step 2: Extracting Positions

Extract the second element for the position, using 'null' if it is missing.
Example:
Given ['Devin H. Bailey', None, 'Associate Professor'], the 'position' key will be 'Associate Professor'.
Step 3: Extracting Research Interests

Extract the third element for research interests, using 'null' if it is missing.
Example:
Given ['Devin H. Bailey', None, 'Associate Professor'], the 'research_interests' key will be 'null' since the research interests are missing.
Creating Individual JSON Objects:

For each professor, create a JSON object (dictionary in Python) with the keys 'name', 'position', and 'research_interests'.
Ensure to replace missing elements with 'null'.
Building the Final JSON Output:

Combine these individual JSON objects into a single JSON array.
The final output should be a clean JSON array without any additional nesting.
Final Example:

For 'Devin H. Bailey', the JSON object will be:
{
    "name": "Devin H. Bailey",
    "position": Associate Professor,
    "research_interests": "null"
}
Continue this process for Rest of Professors, following the same steps. Don't write the Final Example JSON Object.
